// Code generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str =
    include_str!("/home/bueno/dev/levels-rank/levels-rank-api-rust/prisma/schema.prisma");
static DATABASE_STR: &'static str = "mysql";
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(
    url: &str,
) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder()
        .with_url(url.to_string())
        .build()
        .await
}
pub mod lvl_base {
    
    use super::*;
    pub const NAME: &str = "lvl_base";
    pub mod steam {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam,
        };
        pub const NAME: &str = "steam";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetSteam(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Steam(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Steam(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::SteamEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Steam,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Steam(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Steam(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod name {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "name";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetName(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Name(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Name(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Name(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Name, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Name(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Name(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod value {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "value";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetValue(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Value(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Value(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Value(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Value, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementValue(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementValue(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyValue(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideValue(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Value(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Value(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod rank {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "rank";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRank(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Rank(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Rank(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Rank(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Rank, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementRank(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementRank(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyRank(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideRank(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Rank(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Rank(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod kills {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "kills";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetKills(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Kills(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Kills(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Kills(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Kills, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementKills(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementKills(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyKills(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideKills(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Kills(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Kills(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod deaths {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "deaths";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetDeaths(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Deaths(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Deaths(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Deaths(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Deaths, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementDeaths(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementDeaths(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyDeaths(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideDeaths(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Deaths(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Deaths(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod shoots {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "shoots";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetShoots(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Shoots(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Shoots(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Shoots(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Shoots, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementShoots(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementShoots(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyShoots(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideShoots(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Shoots(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Shoots(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod hits {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "hits";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetHits(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Hits(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Hits(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Hits(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Hits, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementHits(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementHits(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyHits(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideHits(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Hits(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Hits(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod headshots {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "headshots";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetHeadshots(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Headshots(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Headshots(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Headshots(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            Headshots,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementHeadshots(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementHeadshots(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyHeadshots(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideHeadshots(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Headshots(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Headshots(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod assists {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "assists";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetAssists(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Assists(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Assists(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Assists(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Assists, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementAssists(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementAssists(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyAssists(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideAssists(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Assists(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Assists(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod round_win {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "round_win";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRoundWin(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::RoundWin(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::RoundWin(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::RoundWin(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            RoundWin,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementRoundWin(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementRoundWin(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyRoundWin(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideRoundWin(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::RoundWin(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::RoundWin(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod round_lose {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "round_lose";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetRoundLose(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::RoundLose(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::RoundLose(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::RoundLose(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            RoundLose,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementRoundLose(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementRoundLose(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyRoundLose(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideRoundLose(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::RoundLose(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::RoundLose(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod playtime {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "playtime";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPlaytime(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Playtime(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Playtime(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Playtime(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            Playtime,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementPlaytime(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementPlaytime(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyPlaytime(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DividePlaytime(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Playtime(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Playtime(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod lastconnect {
        use super::super::*;
        
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, WhereParam,
        };
        pub const NAME: &str = "lastconnect";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetLastconnect(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Lastconnect(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Lastconnect(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Lastconnect(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            Lastconnect,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementLastconnect(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementLastconnect(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyLastconnect(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideLastconnect(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Lastconnect(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Lastconnect(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create(
        steam: String,
        name: String,
        value: i32,
        rank: i32,
        kills: i32,
        deaths: i32,
        shoots: i32,
        hits: i32,
        headshots: i32,
        assists: i32,
        round_win: i32,
        round_lose: i32,
        playtime: i32,
        lastconnect: i32,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        Vec<SetParam>,
    ) {
        (
            steam,
            name,
            value,
            rank,
            kills,
            deaths,
            shoots,
            hits,
            headshots,
            assists,
            round_win,
            round_lose,
            playtime,
            lastconnect,
            _params,
        )
    }
    pub fn create_unchecked(
        steam: String,
        name: String,
        value: i32,
        rank: i32,
        kills: i32,
        deaths: i32,
        shoots: i32,
        hits: i32,
        headshots: i32,
        assists: i32,
        round_win: i32,
        round_lose: i32,
        playtime: i32,
        lastconnect: i32,
        _params: Vec<SetParam>,
    ) -> (
        String,
        String,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        i32,
        Vec<SetParam>,
    ) {
        (
            steam,
            name,
            value,
            rank,
            kills,
            deaths,
            shoots,
            hits,
            headshots,
            assists,
            round_win,
            round_lose,
            playtime,
            lastconnect,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_lvl_base { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: lvl_base :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: lvl_base :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: lvl_base :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: lvl_base :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: lvl_base :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: lvl_base :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { steam , name , value , rank , kills , deaths , shoots , hits , headshots , assists , round_win , round_lose , playtime , lastconnect } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: lvl_base :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: lvl_base :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: lvl_base :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: lvl_base :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["steam" , "name" , "value" , "rank" , "kills" , "deaths" , "shoots" , "hits" , "headshots" , "assists" , "round_win" , "round_lose" , "playtime" , "lastconnect"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: lvl_base :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; steam) => { String } ; (@ field_type ; name) => { String } ; (@ field_type ; value) => { i32 } ; (@ field_type ; rank) => { i32 } ; (@ field_type ; kills) => { i32 } ; (@ field_type ; deaths) => { i32 } ; (@ field_type ; shoots) => { i32 } ; (@ field_type ; hits) => { i32 } ; (@ field_type ; headshots) => { i32 } ; (@ field_type ; assists) => { i32 } ; (@ field_type ; round_win) => { i32 } ; (@ field_type ; round_lose) => { i32 } ; (@ field_type ; playtime) => { i32 } ; (@ field_type ; lastconnect) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "LvlBase" , available relations are "steam, name, value, rank, kills, deaths, shoots, hits, headshots, assists, round_win, round_lose, playtime, lastconnect")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; steam) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: steam :: Select) } ; (@ selection_field_to_selection_param ; name) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: name :: Select) } ; (@ selection_field_to_selection_param ; value) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: value :: Select) } ; (@ selection_field_to_selection_param ; rank) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: rank :: Select) } ; (@ selection_field_to_selection_param ; kills) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: kills :: Select) } ; (@ selection_field_to_selection_param ; deaths) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: deaths :: Select) } ; (@ selection_field_to_selection_param ; shoots) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: shoots :: Select) } ; (@ selection_field_to_selection_param ; hits) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: hits :: Select) } ; (@ selection_field_to_selection_param ; headshots) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: headshots :: Select) } ; (@ selection_field_to_selection_param ; assists) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: assists :: Select) } ; (@ selection_field_to_selection_param ; round_win) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: round_win :: Select) } ; (@ selection_field_to_selection_param ; round_lose) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: round_lose :: Select) } ; (@ selection_field_to_selection_param ; playtime) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: playtime :: Select) } ; (@ selection_field_to_selection_param ; lastconnect) => { Into :: < crate :: prisma :: lvl_base :: SelectParam > :: into (crate :: prisma :: lvl_base :: lastconnect :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: lvl_base :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; steam) => { "steam" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; value) => { "value" } ; (@ field_serde_name ; rank) => { "rank" } ; (@ field_serde_name ; kills) => { "kills" } ; (@ field_serde_name ; deaths) => { "deaths" } ; (@ field_serde_name ; shoots) => { "shoots" } ; (@ field_serde_name ; hits) => { "hits" } ; (@ field_serde_name ; headshots) => { "headshots" } ; (@ field_serde_name ; assists) => { "assists" } ; (@ field_serde_name ; round_win) => { "round_win" } ; (@ field_serde_name ; round_lose) => { "round_lose" } ; (@ field_serde_name ; playtime) => { "playtime" } ; (@ field_serde_name ; lastconnect) => { "lastconnect" } ; }
    pub use _select_lvl_base as select;
    pub enum SelectParam {
        Steam(steam::Select),
        Name(name::Select),
        Value(value::Select),
        Rank(rank::Select),
        Kills(kills::Select),
        Deaths(deaths::Select),
        Shoots(shoots::Select),
        Hits(hits::Select),
        Headshots(headshots::Select),
        Assists(assists::Select),
        RoundWin(round_win::Select),
        RoundLose(round_lose::Select),
        Playtime(playtime::Select),
        Lastconnect(lastconnect::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Steam(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Value(data) => data.to_selection(),
                Self::Rank(data) => data.to_selection(),
                Self::Kills(data) => data.to_selection(),
                Self::Deaths(data) => data.to_selection(),
                Self::Shoots(data) => data.to_selection(),
                Self::Hits(data) => data.to_selection(),
                Self::Headshots(data) => data.to_selection(),
                Self::Assists(data) => data.to_selection(),
                Self::RoundWin(data) => data.to_selection(),
                Self::RoundLose(data) => data.to_selection(),
                Self::Playtime(data) => data.to_selection(),
                Self::Lastconnect(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_lvl_base { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: lvl_base :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: lvl_base :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: lvl_base :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: lvl_base :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: lvl_base :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: lvl_base :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: lvl_base :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: lvl_base :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub steam : String , pub name : String , pub value : i32 , pub rank : i32 , pub kills : i32 , pub deaths : i32 , pub shoots : i32 , pub hits : i32 , pub headshots : i32 , pub assists : i32 , pub round_win : i32 , pub round_lose : i32 , pub playtime : i32 , pub lastconnect : i32 , $ (pub $ field : crate :: prisma :: lvl_base :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (steam) , stringify ! (name) , stringify ! (value) , stringify ! (rank) , stringify ! (kills) , stringify ! (deaths) , stringify ! (shoots) , stringify ! (hits) , stringify ! (headshots) , stringify ! (assists) , stringify ! (round_win) , stringify ! (round_lose) , stringify ! (playtime) , stringify ! (lastconnect)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: lvl_base :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: lvl_base :: steam :: NAME , & self . steam) ? ; state . serialize_field (crate :: prisma :: lvl_base :: name :: NAME , & self . name) ? ; state . serialize_field (crate :: prisma :: lvl_base :: value :: NAME , & self . value) ? ; state . serialize_field (crate :: prisma :: lvl_base :: rank :: NAME , & self . rank) ? ; state . serialize_field (crate :: prisma :: lvl_base :: kills :: NAME , & self . kills) ? ; state . serialize_field (crate :: prisma :: lvl_base :: deaths :: NAME , & self . deaths) ? ; state . serialize_field (crate :: prisma :: lvl_base :: shoots :: NAME , & self . shoots) ? ; state . serialize_field (crate :: prisma :: lvl_base :: hits :: NAME , & self . hits) ? ; state . serialize_field (crate :: prisma :: lvl_base :: headshots :: NAME , & self . headshots) ? ; state . serialize_field (crate :: prisma :: lvl_base :: assists :: NAME , & self . assists) ? ; state . serialize_field (crate :: prisma :: lvl_base :: round_win :: NAME , & self . round_win) ? ; state . serialize_field (crate :: prisma :: lvl_base :: round_lose :: NAME , & self . round_lose) ? ; state . serialize_field (crate :: prisma :: lvl_base :: playtime :: NAME , & self . playtime) ? ; state . serialize_field (crate :: prisma :: lvl_base :: lastconnect :: NAME , & self . lastconnect) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , steam , name , value , rank , kills , deaths , shoots , hits , headshots , assists , round_win , round_lose , playtime , lastconnect } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: lvl_base :: $ field :: NAME) , + , crate :: prisma :: lvl_base :: steam :: NAME , crate :: prisma :: lvl_base :: name :: NAME , crate :: prisma :: lvl_base :: value :: NAME , crate :: prisma :: lvl_base :: rank :: NAME , crate :: prisma :: lvl_base :: kills :: NAME , crate :: prisma :: lvl_base :: deaths :: NAME , crate :: prisma :: lvl_base :: shoots :: NAME , crate :: prisma :: lvl_base :: hits :: NAME , crate :: prisma :: lvl_base :: headshots :: NAME , crate :: prisma :: lvl_base :: assists :: NAME , crate :: prisma :: lvl_base :: round_win :: NAME , crate :: prisma :: lvl_base :: round_lose :: NAME , crate :: prisma :: lvl_base :: playtime :: NAME , crate :: prisma :: lvl_base :: lastconnect :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: lvl_base :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: lvl_base :: steam :: NAME => Ok (Field :: steam) , crate :: prisma :: lvl_base :: name :: NAME => Ok (Field :: name) , crate :: prisma :: lvl_base :: value :: NAME => Ok (Field :: value) , crate :: prisma :: lvl_base :: rank :: NAME => Ok (Field :: rank) , crate :: prisma :: lvl_base :: kills :: NAME => Ok (Field :: kills) , crate :: prisma :: lvl_base :: deaths :: NAME => Ok (Field :: deaths) , crate :: prisma :: lvl_base :: shoots :: NAME => Ok (Field :: shoots) , crate :: prisma :: lvl_base :: hits :: NAME => Ok (Field :: hits) , crate :: prisma :: lvl_base :: headshots :: NAME => Ok (Field :: headshots) , crate :: prisma :: lvl_base :: assists :: NAME => Ok (Field :: assists) , crate :: prisma :: lvl_base :: round_win :: NAME => Ok (Field :: round_win) , crate :: prisma :: lvl_base :: round_lose :: NAME => Ok (Field :: round_lose) , crate :: prisma :: lvl_base :: playtime :: NAME => Ok (Field :: playtime) , crate :: prisma :: lvl_base :: lastconnect :: NAME => Ok (Field :: lastconnect) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut steam = None ; let mut name = None ; let mut value = None ; let mut rank = None ; let mut kills = None ; let mut deaths = None ; let mut shoots = None ; let mut hits = None ; let mut headshots = None ; let mut assists = None ; let mut round_win = None ; let mut round_lose = None ; let mut playtime = None ; let mut lastconnect = None ; while let Some (key) = map . next_key () ? { match key { Field :: steam => { if steam . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: steam :: NAME)) ; } steam = Some (map . next_value () ?) ; } Field :: name => { if name . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: name :: NAME)) ; } name = Some (map . next_value () ?) ; } Field :: value => { if value . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: value :: NAME)) ; } value = Some (map . next_value () ?) ; } Field :: rank => { if rank . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: rank :: NAME)) ; } rank = Some (map . next_value () ?) ; } Field :: kills => { if kills . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: kills :: NAME)) ; } kills = Some (map . next_value () ?) ; } Field :: deaths => { if deaths . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: deaths :: NAME)) ; } deaths = Some (map . next_value () ?) ; } Field :: shoots => { if shoots . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: shoots :: NAME)) ; } shoots = Some (map . next_value () ?) ; } Field :: hits => { if hits . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: hits :: NAME)) ; } hits = Some (map . next_value () ?) ; } Field :: headshots => { if headshots . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: headshots :: NAME)) ; } headshots = Some (map . next_value () ?) ; } Field :: assists => { if assists . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: assists :: NAME)) ; } assists = Some (map . next_value () ?) ; } Field :: round_win => { if round_win . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: round_win :: NAME)) ; } round_win = Some (map . next_value () ?) ; } Field :: round_lose => { if round_lose . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: round_lose :: NAME)) ; } round_lose = Some (map . next_value () ?) ; } Field :: playtime => { if playtime . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: playtime :: NAME)) ; } playtime = Some (map . next_value () ?) ; } Field :: lastconnect => { if lastconnect . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: lastconnect :: NAME)) ; } lastconnect = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: lvl_base :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: $ field :: NAME)) ? ;) * let steam = steam . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: steam :: NAME)) ? ; let name = name . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: name :: NAME)) ? ; let value = value . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: value :: NAME)) ? ; let rank = rank . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: rank :: NAME)) ? ; let kills = kills . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: kills :: NAME)) ? ; let deaths = deaths . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: deaths :: NAME)) ? ; let shoots = shoots . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: shoots :: NAME)) ? ; let hits = hits . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: hits :: NAME)) ? ; let headshots = headshots . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: headshots :: NAME)) ? ; let assists = assists . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: assists :: NAME)) ? ; let round_win = round_win . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: round_win :: NAME)) ? ; let round_lose = round_lose . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: round_lose :: NAME)) ? ; let playtime = playtime . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: playtime :: NAME)) ? ; let lastconnect = lastconnect . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: lvl_base :: lastconnect :: NAME)) ? ; Ok (Data { steam , name , value , rank , kills , deaths , shoots , hits , headshots , assists , round_win , round_lose , playtime , lastconnect , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["steam" , "name" , "value" , "rank" , "kills" , "deaths" , "shoots" , "hits" , "headshots" , "assists" , "round_win" , "round_lose" , "playtime" , "lastconnect"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: lvl_base :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "LvlBase" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: lvl_base :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; steam) => { "steam" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; value) => { "value" } ; (@ field_serde_name ; rank) => { "rank" } ; (@ field_serde_name ; kills) => { "kills" } ; (@ field_serde_name ; deaths) => { "deaths" } ; (@ field_serde_name ; shoots) => { "shoots" } ; (@ field_serde_name ; hits) => { "hits" } ; (@ field_serde_name ; headshots) => { "headshots" } ; (@ field_serde_name ; assists) => { "assists" } ; (@ field_serde_name ; round_win) => { "round_win" } ; (@ field_serde_name ; round_lose) => { "round_lose" } ; (@ field_serde_name ; playtime) => { "playtime" } ; (@ field_serde_name ; lastconnect) => { "lastconnect" } ; }
    pub use _include_lvl_base as include;
    pub enum IncludeParam {
        Steam(steam::Include),
        Name(name::Include),
        Value(value::Include),
        Rank(rank::Include),
        Kills(kills::Include),
        Deaths(deaths::Include),
        Shoots(shoots::Include),
        Hits(hits::Include),
        Headshots(headshots::Include),
        Assists(assists::Include),
        RoundWin(round_win::Include),
        RoundLose(round_lose::Include),
        Playtime(playtime::Include),
        Lastconnect(lastconnect::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Steam(data) => data.to_selection(),
                Self::Name(data) => data.to_selection(),
                Self::Value(data) => data.to_selection(),
                Self::Rank(data) => data.to_selection(),
                Self::Kills(data) => data.to_selection(),
                Self::Deaths(data) => data.to_selection(),
                Self::Shoots(data) => data.to_selection(),
                Self::Hits(data) => data.to_selection(),
                Self::Headshots(data) => data.to_selection(),
                Self::Assists(data) => data.to_selection(),
                Self::RoundWin(data) => data.to_selection(),
                Self::RoundLose(data) => data.to_selection(),
                Self::Playtime(data) => data.to_selection(),
                Self::Lastconnect(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_lvl_base { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: lvl_base struct $ struct_name { # [serde (rename = "steam")] pub steam : String , # [serde (rename = "name")] pub name : String , # [serde (rename = "value")] pub value : i32 , # [serde (rename = "rank")] pub rank : i32 , # [serde (rename = "kills")] pub kills : i32 , # [serde (rename = "deaths")] pub deaths : i32 , # [serde (rename = "shoots")] pub shoots : i32 , # [serde (rename = "hits")] pub hits : i32 , # [serde (rename = "headshots")] pub headshots : i32 , # [serde (rename = "assists")] pub assists : i32 , # [serde (rename = "round_win")] pub round_win : i32 , # [serde (rename = "round_lose")] pub round_lose : i32 , # [serde (rename = "playtime")] pub playtime : i32 , # [serde (rename = "lastconnect")] pub lastconnect : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_lvl_base as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "steam")]
        pub steam: String,
        #[serde(rename = "name")]
        pub name: String,
        #[serde(rename = "value")]
        pub value: i32,
        #[serde(rename = "rank")]
        pub rank: i32,
        #[serde(rename = "kills")]
        pub kills: i32,
        #[serde(rename = "deaths")]
        pub deaths: i32,
        #[serde(rename = "shoots")]
        pub shoots: i32,
        #[serde(rename = "hits")]
        pub hits: i32,
        #[serde(rename = "headshots")]
        pub headshots: i32,
        #[serde(rename = "assists")]
        pub assists: i32,
        #[serde(rename = "round_win")]
        pub round_win: i32,
        #[serde(rename = "round_lose")]
        pub round_lose: i32,
        #[serde(rename = "playtime")]
        pub playtime: i32,
        #[serde(rename = "lastconnect")]
        pub lastconnect: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetSteam(String),
        SetName(String),
        SetValue(i32),
        IncrementValue(i32),
        DecrementValue(i32),
        MultiplyValue(i32),
        DivideValue(i32),
        SetRank(i32),
        IncrementRank(i32),
        DecrementRank(i32),
        MultiplyRank(i32),
        DivideRank(i32),
        SetKills(i32),
        IncrementKills(i32),
        DecrementKills(i32),
        MultiplyKills(i32),
        DivideKills(i32),
        SetDeaths(i32),
        IncrementDeaths(i32),
        DecrementDeaths(i32),
        MultiplyDeaths(i32),
        DivideDeaths(i32),
        SetShoots(i32),
        IncrementShoots(i32),
        DecrementShoots(i32),
        MultiplyShoots(i32),
        DivideShoots(i32),
        SetHits(i32),
        IncrementHits(i32),
        DecrementHits(i32),
        MultiplyHits(i32),
        DivideHits(i32),
        SetHeadshots(i32),
        IncrementHeadshots(i32),
        DecrementHeadshots(i32),
        MultiplyHeadshots(i32),
        DivideHeadshots(i32),
        SetAssists(i32),
        IncrementAssists(i32),
        DecrementAssists(i32),
        MultiplyAssists(i32),
        DivideAssists(i32),
        SetRoundWin(i32),
        IncrementRoundWin(i32),
        DecrementRoundWin(i32),
        MultiplyRoundWin(i32),
        DivideRoundWin(i32),
        SetRoundLose(i32),
        IncrementRoundLose(i32),
        DecrementRoundLose(i32),
        MultiplyRoundLose(i32),
        DivideRoundLose(i32),
        SetPlaytime(i32),
        IncrementPlaytime(i32),
        DecrementPlaytime(i32),
        MultiplyPlaytime(i32),
        DividePlaytime(i32),
        SetLastconnect(i32),
        IncrementLastconnect(i32),
        DecrementLastconnect(i32),
        MultiplyLastconnect(i32),
        DivideLastconnect(i32),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetSteam(value) => (
                    steam::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetName(value) => (
                    name::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetValue(value) => (
                    value::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementValue(value) => (
                    value::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementValue(value) => (
                    value::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyValue(value) => (
                    value::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideValue(value) => (
                    value::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetRank(value) => (
                    rank::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementRank(value) => (
                    rank::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementRank(value) => (
                    rank::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyRank(value) => (
                    rank::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideRank(value) => (
                    rank::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetKills(value) => (
                    kills::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementKills(value) => (
                    kills::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementKills(value) => (
                    kills::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyKills(value) => (
                    kills::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideKills(value) => (
                    kills::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetDeaths(value) => (
                    deaths::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementDeaths(value) => (
                    deaths::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementDeaths(value) => (
                    deaths::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyDeaths(value) => (
                    deaths::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideDeaths(value) => (
                    deaths::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetShoots(value) => (
                    shoots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementShoots(value) => (
                    shoots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementShoots(value) => (
                    shoots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyShoots(value) => (
                    shoots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideShoots(value) => (
                    shoots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetHits(value) => (
                    hits::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementHits(value) => (
                    hits::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementHits(value) => (
                    hits::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyHits(value) => (
                    hits::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideHits(value) => (
                    hits::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetHeadshots(value) => (
                    headshots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementHeadshots(value) => (
                    headshots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementHeadshots(value) => (
                    headshots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyHeadshots(value) => (
                    headshots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideHeadshots(value) => (
                    headshots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetAssists(value) => (
                    assists::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementAssists(value) => (
                    assists::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementAssists(value) => (
                    assists::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyAssists(value) => (
                    assists::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideAssists(value) => (
                    assists::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetRoundWin(value) => (
                    round_win::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementRoundWin(value) => (
                    round_win::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementRoundWin(value) => (
                    round_win::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyRoundWin(value) => (
                    round_win::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideRoundWin(value) => (
                    round_win::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetRoundLose(value) => (
                    round_lose::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementRoundLose(value) => (
                    round_lose::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementRoundLose(value) => (
                    round_lose::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyRoundLose(value) => (
                    round_lose::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideRoundLose(value) => (
                    round_lose::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetPlaytime(value) => (
                    playtime::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementPlaytime(value) => (
                    playtime::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementPlaytime(value) => (
                    playtime::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyPlaytime(value) => (
                    playtime::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DividePlaytime(value) => (
                    playtime::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetLastconnect(value) => (
                    lastconnect::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementLastconnect(value) => (
                    lastconnect::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementLastconnect(value) => (
                    lastconnect::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyLastconnect(value) => (
                    lastconnect::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideLastconnect(value) => (
                    lastconnect::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Steam(String),
        Name(String),
        Value(i32),
        Rank(i32),
        Kills(i32),
        Deaths(i32),
        Shoots(i32),
        Hits(i32),
        Headshots(i32),
        Assists(i32),
        RoundWin(i32),
        RoundLose(i32),
        Playtime(i32),
        Lastconnect(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Steam(value) => Self::SetSteam(value),
                UncheckedSetParam::Name(value) => Self::SetName(value),
                UncheckedSetParam::Value(value) => Self::SetValue(value),
                UncheckedSetParam::Rank(value) => Self::SetRank(value),
                UncheckedSetParam::Kills(value) => Self::SetKills(value),
                UncheckedSetParam::Deaths(value) => Self::SetDeaths(value),
                UncheckedSetParam::Shoots(value) => Self::SetShoots(value),
                UncheckedSetParam::Hits(value) => Self::SetHits(value),
                UncheckedSetParam::Headshots(value) => Self::SetHeadshots(value),
                UncheckedSetParam::Assists(value) => Self::SetAssists(value),
                UncheckedSetParam::RoundWin(value) => Self::SetRoundWin(value),
                UncheckedSetParam::RoundLose(value) => Self::SetRoundLose(value),
                UncheckedSetParam::Playtime(value) => Self::SetPlaytime(value),
                UncheckedSetParam::Lastconnect(value) => Self::SetLastconnect(value),
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Steam(::prisma_client_rust::Direction),
        Name(::prisma_client_rust::Direction),
        Value(::prisma_client_rust::Direction),
        Rank(::prisma_client_rust::Direction),
        Kills(::prisma_client_rust::Direction),
        Deaths(::prisma_client_rust::Direction),
        Shoots(::prisma_client_rust::Direction),
        Hits(::prisma_client_rust::Direction),
        Headshots(::prisma_client_rust::Direction),
        Assists(::prisma_client_rust::Direction),
        RoundWin(::prisma_client_rust::Direction),
        RoundLose(::prisma_client_rust::Direction),
        Playtime(::prisma_client_rust::Direction),
        Lastconnect(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Steam(direction) => (
                    steam::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Name(direction) => (
                    name::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Value(direction) => (
                    value::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Rank(direction) => (
                    rank::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Kills(direction) => (
                    kills::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Deaths(direction) => (
                    deaths::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Shoots(direction) => (
                    shoots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Hits(direction) => (
                    hits::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Headshots(direction) => (
                    headshots::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Assists(direction) => (
                    assists::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::RoundWin(direction) => (
                    round_win::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::RoundLose(direction) => (
                    round_lose::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Playtime(direction) => (
                    playtime::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Lastconnect(direction) => (
                    lastconnect::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Steam(_prisma::read_filters::StringFilter),
        Name(_prisma::read_filters::StringFilter),
        Value(_prisma::read_filters::IntFilter),
        Rank(_prisma::read_filters::IntFilter),
        Kills(_prisma::read_filters::IntFilter),
        Deaths(_prisma::read_filters::IntFilter),
        Shoots(_prisma::read_filters::IntFilter),
        Hits(_prisma::read_filters::IntFilter),
        Headshots(_prisma::read_filters::IntFilter),
        Assists(_prisma::read_filters::IntFilter),
        RoundWin(_prisma::read_filters::IntFilter),
        RoundLose(_prisma::read_filters::IntFilter),
        Playtime(_prisma::read_filters::IntFilter),
        Lastconnect(_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Steam(value) => (steam::NAME, value.into()),
                Self::Name(value) => (name::NAME, value.into()),
                Self::Value(value) => (value::NAME, value.into()),
                Self::Rank(value) => (rank::NAME, value.into()),
                Self::Kills(value) => (kills::NAME, value.into()),
                Self::Deaths(value) => (deaths::NAME, value.into()),
                Self::Shoots(value) => (shoots::NAME, value.into()),
                Self::Hits(value) => (hits::NAME, value.into()),
                Self::Headshots(value) => (headshots::NAME, value.into()),
                Self::Assists(value) => (assists::NAME, value.into()),
                Self::RoundWin(value) => (round_win::NAME, value.into()),
                Self::RoundLose(value) => (round_lose::NAME, value.into()),
                Self::Playtime(value) => (playtime::NAME, value.into()),
                Self::Lastconnect(value) => (lastconnect::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        SteamEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::SteamEquals(value) => {
                    Self::Steam(_prisma::read_filters::StringFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(steam::NAME),
                ::prisma_client_rust::sel(name::NAME),
                ::prisma_client_rust::sel(value::NAME),
                ::prisma_client_rust::sel(rank::NAME),
                ::prisma_client_rust::sel(kills::NAME),
                ::prisma_client_rust::sel(deaths::NAME),
                ::prisma_client_rust::sel(shoots::NAME),
                ::prisma_client_rust::sel(hits::NAME),
                ::prisma_client_rust::sel(headshots::NAME),
                ::prisma_client_rust::sel(assists::NAME),
                ::prisma_client_rust::sel(round_win::NAME),
                ::prisma_client_rust::sel(round_lose::NAME),
                ::prisma_client_rust::sel(playtime::NAME),
                ::prisma_client_rust::sel(lastconnect::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            steam: String,
            name: String,
            value: i32,
            rank: i32,
            kills: i32,
            deaths: i32,
            shoots: i32,
            hits: i32,
            headshots: i32,
            assists: i32,
            round_win: i32,
            round_lose: i32,
            playtime: i32,
            lastconnect: i32,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                steam::set(steam),
                name::set(name),
                value::set(value),
                rank::set(rank),
                kills::set(kills),
                deaths::set(deaths),
                shoots::set(shoots),
                hits::set(hits),
                headshots::set(headshots),
                assists::set(assists),
                round_win::set(round_win),
                round_lose::set(round_lose),
                playtime::set(playtime),
                lastconnect::set(lastconnect),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            steam: String,
            name: String,
            value: i32,
            rank: i32,
            kills: i32,
            deaths: i32,
            shoots: i32,
            hits: i32,
            headshots: i32,
            assists: i32,
            round_win: i32,
            round_lose: i32,
            playtime: i32,
            lastconnect: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                steam::set(steam),
                name::set(name),
                value::set(value),
                rank::set(rank),
                kills::set(kills),
                deaths::set(deaths),
                shoots::set(shoots),
                hits::set(hits),
                headshots::set(headshots),
                assists::set(assists),
                round_win::set(round_win),
                round_lose::set(round_lose),
                playtime::set(playtime),
                lastconnect::set(lastconnect),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn create_many(
            self,
            data: Vec<(
                String,
                String,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                Vec<SetParam>,
            )>,
        ) -> CreateMany<'a> {
            let data = data
                .into_iter()
                .map(
                    |(
                        steam,
                        name,
                        value,
                        rank,
                        kills,
                        deaths,
                        shoots,
                        hits,
                        headshots,
                        assists,
                        round_win,
                        round_lose,
                        playtime,
                        lastconnect,
                        mut _params,
                    )| {
                        _params.extend([
                            steam::set(steam),
                            name::set(name),
                            value::set(value),
                            rank::set(rank),
                            kills::set(kills),
                            deaths::set(deaths),
                            shoots::set(shoots),
                            hits::set(hits),
                            headshots::set(headshots),
                            assists::set(assists),
                            round_win::set(round_win),
                            round_lose::set(round_lose),
                            playtime::set(playtime),
                            lastconnect::set(lastconnect),
                        ]);
                        _params
                    },
                )
                .collect();
            CreateMany::new(self.client, data)
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (
                steam,
                name,
                value,
                rank,
                kills,
                deaths,
                shoots,
                hits,
                headshots,
                assists,
                round_win,
                round_lose,
                playtime,
                lastconnect,
                mut _params,
            ): (
                String,
                String,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                i32,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                steam::set(steam),
                name::set(name),
                value::set(value),
                rank::set(rank),
                kills::set(kills),
                deaths::set(deaths),
                shoots::set(shoots),
                hits::set(hits),
                headshots::set(headshots),
                assists::set(assists),
                round_win::set(round_win),
                round_lose::set(round_lose),
                playtime::set(playtime),
                lastconnect::set(lastconnect),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod _prisma {
    pub struct PrismaClientBuilder {
        url: Option<String>,
        action_notifier: ::prisma_client_rust::ActionNotifier,
    }
    impl PrismaClientBuilder {
        fn new() -> Self {
            Self {
                url: None,
                action_notifier: ::prisma_client_rust::ActionNotifier::new(),
            }
        }
        pub fn with_url(mut self, url: String) -> Self {
            self.url = Some(url);
            self
        }
        pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
            let internals = ::prisma_client_rust::PrismaClientInternals::new(
                self.url,
                self.action_notifier,
                super::DATAMODEL_STR,
            )
            .await?;
            Ok(PrismaClient(internals))
        }
    }
    pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
    impl ::std::fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub fn _builder() -> PrismaClientBuilder {
            PrismaClientBuilder::new()
        }
        pub fn _query_raw<T: ::prisma_client_rust::Data>(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::QueryRaw<T> {
            ::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub fn _execute_raw(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::ExecuteRaw {
            ::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub async fn _batch<
            'batch,
            T: ::prisma_client_rust::BatchContainer<'batch, Marker>,
            Marker,
        >(
            &self,
            queries: T,
        ) -> ::prisma_client_rust::Result<
            <T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType,
        > {
            ::prisma_client_rust::batch(queries, &self.0).await
        }
        pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
            ::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
        }
        pub fn lvl_base(&self) -> super::lvl_base::Actions {
            super::lvl_base::Actions { client: &self.0 }
        }
    }
    impl ::prisma_client_rust::PrismaClient for PrismaClient {
        fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
            &self.0
        }
        fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
            &mut self.0
        }
        fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
            Self(self.0.with_tx_id(tx_id))
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum LvlBaseScalarFieldEnum {
        #[serde(rename = "steam")]
        Steam,
        #[serde(rename = "name")]
        Name,
        #[serde(rename = "value")]
        Value,
        #[serde(rename = "rank")]
        Rank,
        #[serde(rename = "kills")]
        Kills,
        #[serde(rename = "deaths")]
        Deaths,
        #[serde(rename = "shoots")]
        Shoots,
        #[serde(rename = "hits")]
        Hits,
        #[serde(rename = "headshots")]
        Headshots,
        #[serde(rename = "assists")]
        Assists,
        #[serde(rename = "round_win")]
        RoundWin,
        #[serde(rename = "round_lose")]
        RoundLose,
        #[serde(rename = "playtime")]
        Playtime,
        #[serde(rename = "lastconnect")]
        Lastconnect,
    }
    impl ToString for LvlBaseScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Steam => "steam".to_string(),
                Self::Name => "name".to_string(),
                Self::Value => "value".to_string(),
                Self::Rank => "rank".to_string(),
                Self::Kills => "kills".to_string(),
                Self::Deaths => "deaths".to_string(),
                Self::Shoots => "shoots".to_string(),
                Self::Hits => "hits".to_string(),
                Self::Headshots => "headshots".to_string(),
                Self::Assists => "assists".to_string(),
                Self::RoundWin => "round_win".to_string(),
                Self::RoundLose => "round_lose".to_string(),
                Self::Playtime => "playtime".to_string(),
                Self::Lastconnect => "lastconnect".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TransactionIsolationLevel {
        #[serde(rename = "ReadUncommitted")]
        ReadUncommitted,
        #[serde(rename = "ReadCommitted")]
        ReadCommitted,
        #[serde(rename = "RepeatableRead")]
        RepeatableRead,
        #[serde(rename = "Serializable")]
        Serializable,
    }
    impl ToString for TransactionIsolationLevel {
        fn to_string(&self) -> String {
            match self {
                Self::ReadUncommitted => "ReadUncommitted".to_string(),
                Self::ReadCommitted => "ReadCommitted".to_string(),
                Self::RepeatableRead => "RepeatableRead".to_string(),
                Self::Serializable => "Serializable".to_string(),
            }
        }
    }
    impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
    pub mod read_filters {
        #[derive(Clone)]
        pub enum StringFilter {
            Equals(String),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Not(String),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "contains".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "startsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::EndsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "endsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum IntFilter {
            Equals(i32),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(i32),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::Int(value as i64),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                }
            }
        }
    }
}
pub use _prisma::*;
